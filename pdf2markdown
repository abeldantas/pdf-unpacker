#!/bin/bash

# pdf2markdown - Convert PDF to Markdown with Imgur image hosting
# Usage: 
#   Single file: ./pdf2markdown input.pdf [output.md]
#   Folder: ./pdf2markdown --folder path/to/pdfs output/dir

set -e

# Check dependencies
check_dependency() {
  local cmd=$1
  local install_instructions=$2
  if ! command -v $cmd >/dev/null 2>&1; then
    echo "Error: $cmd is required but not installed."
    echo "$install_instructions"
    exit 1
  fi
}

check_dependency npx "Install with: npm install -g npx"
check_dependency curl "Install with:
  - Ubuntu/Debian: sudo apt-get install curl
  - MacOS: brew install curl
  - Windows: choco install curl"
check_dependency jq "Install with:
  - Ubuntu/Debian: sudo apt-get install jq
  - MacOS: brew install jq
  - Windows: choco install jq"

# Check if @opendocsg/pdf2md is installed
if ! npm list -g @opendocsg/pdf2md >/dev/null 2>&1 && ! npm list @opendocsg/pdf2md >/dev/null 2>&1; then
  echo "Installing @opendocsg/pdf2md..."
  npm install @opendocsg/pdf2md
fi

# Load environment variables
if [ -f .env ]; then
  source .env
else
  echo "Error: .env file not found. Please create one with your Imgur credentials."
  exit 1
fi

# Check if Imgur credentials are set
if [ -z "$IMGUR_CLIENT_ID" ] || [ -z "$IMGUR_ACCESS_TOKEN" ]; then
  echo "Error: Imgur credentials not found in .env file."
  exit 1
fi

# Function to convert a single PDF file
convert_single_pdf() {
  local INPUT_PDF="$1"
  local OUTPUT_MD="$2"

  # Check if input file exists
  if [ ! -f "$INPUT_PDF" ]; then
    echo "Error: Input file '$INPUT_PDF' not found."
    return 1
  fi

  # Create a temporary directory
  local TEMP_DIR="temp_$(date +%s)"
  mkdir -p "$TEMP_DIR/input" "$TEMP_DIR/output"
  
  # Copy input file to temp directory
  cp "$INPUT_PDF" "$TEMP_DIR/input/"
  
  echo "Converting PDF to Markdown..."
  npx @opendocsg/pdf2md --inputFolderPath="$TEMP_DIR/input" --outputFolderPath="$TEMP_DIR/output"
  
  # Get the converted file
  local FILE_BASE=$(basename "$INPUT_PDF" .pdf)
  local TEMP_OUTPUT="$TEMP_DIR/output/$FILE_BASE.md"
  
  if [ ! -f "$TEMP_OUTPUT" ]; then
    echo "Error: Conversion failed. No output file was generated."
    rm -rf "$TEMP_DIR"
    return 1
  fi
  
  # Extract images from PDF (this is a bit tricky since pdf2md doesn't extract images)
  # We'll use pdfimages if available, otherwise skip image extraction
  local HAS_IMAGES=false
  if command -v pdfimages >/dev/null 2>&1; then
    echo "Extracting images from PDF..."
    mkdir -p "$TEMP_DIR/images"
    
    # Extract image information including page numbers
    local IMAGE_INFO=$(pdfimages -list "$INPUT_PDF" 2>/dev/null)
    
    # Extract the images
    pdfimages -j "$INPUT_PDF" "$TEMP_DIR/images/img" >/dev/null 2>&1 || true
    
    # Check if any images were extracted
    if [ -n "$(ls -A "$TEMP_DIR/images" 2>/dev/null)" ]; then
      HAS_IMAGES=true
      echo "Found images in the PDF."
      
      # Convert any PPM files to JPG if ImageMagick's convert is available
      if command -v convert >/dev/null 2>&1; then
        echo "Converting PPM images to JPG format..."
        find "$TEMP_DIR/images" -name "*.ppm" -type f | while read -r PPM_FILE; do
          JPG_FILE="${PPM_FILE%.ppm}.jpg"
          convert "$PPM_FILE" "$JPG_FILE" && rm "$PPM_FILE"
        done
      else
        echo "Warning: ImageMagick not found. PPM images may not upload properly to Imgur."
        echo "To convert PPM images, install ImageMagick."
      fi
      
      # Parse image info to get page numbers for each image
      local PAGE_INFO=$(echo "$IMAGE_INFO" | grep -v "^$" | tail -n +2)
      # Save the parsed info to a temporary file for reference
      echo "$PAGE_INFO" > "$TEMP_DIR/image_info.txt"
    else
      echo "No images found in the PDF."
    fi
  else
    echo "Warning: pdfimages not found. Skipping image extraction."
    echo "To extract images, install pdfimages (poppler-utils package)."
  fi
  
  # If we have images, upload them to Imgur
  if [ "$HAS_IMAGES" = true ]; then
    echo "Processing images..."
    local IMAGE_FILES=$(find "$TEMP_DIR/images" -type f | sort)
    local TOTAL_IMAGES=$(echo "$IMAGE_FILES" | wc -l)
    local CURRENT=0
    
    # Create a temporary file to store image references
    local IMGUR_URLS="$TEMP_DIR/imgur_urls.txt"
    touch "$IMGUR_URLS"
    
    # Read the markdown content
    local MD_CONTENT=$(cat "$TEMP_OUTPUT")
    
    # First, upload all images and store their URLs
    echo "$IMAGE_FILES" | while read -r IMAGE_FILE; do
      CURRENT=$((CURRENT + 1))
      local IMAGE_NAME=$(basename "$IMAGE_FILE")
      local IMG_NUM=$(echo "$IMAGE_NAME" | grep -o -E '[0-9]+' | head -1)
      
      echo "[$CURRENT/$TOTAL_IMAGES] Uploading $IMAGE_NAME to Imgur..."
      
      # Upload the image to Imgur
      local RESPONSE=$(curl -s -X POST \
        "https://api.imgur.com/3/image" \
        -H "Authorization: Bearer $IMGUR_ACCESS_TOKEN" \
        -F "image=@$IMAGE_FILE")
      
      # Extract the image URL from the response
      local IMGUR_URL=$(echo "$RESPONSE" | jq -r '.data.link')
      
      if [[ "$IMGUR_URL" == "null" || -z "$IMGUR_URL" ]]; then
        echo "Error uploading image to Imgur:"
        echo "$RESPONSE" | jq '.'
        continue
      fi
      
      echo "Image uploaded successfully: $IMGUR_URL"
      
      # Add image reference to markdown file - since we can't reliably
      # determine exact placement, we'll spread them evenly throughout
      echo "![Image $CURRENT]($IMGUR_URL)" >> "$IMGUR_URLS"
    done
    
    # Now, let's distribute the images into the markdown content
    local MD_LINES=$(echo "$MD_CONTENT" | wc -l)
    local IMAGES=$(cat "$IMGUR_URLS")
    local IMG_COUNT=$(echo "$IMAGES" | wc -l)
    
    # We'll divide the document into sections and place 
    # each image at approximately the end of each section
    local NEW_MD=""
    local SECTION_SIZE=$((MD_LINES / (IMG_COUNT + 1)))
    
    local START=1
    local IMG_INDEX=1
    
    # Add images evenly spaced through the document
    for i in $(seq 1 $IMG_COUNT); do
      local END=$((START + SECTION_SIZE))
      # Extract section
      local SECTION=$(echo "$MD_CONTENT" | sed -n "${START},${END}p")
      # Add section to new markdown
      NEW_MD="$NEW_MD$SECTION"
      # Get the next image
      local IMG=$(echo "$IMAGES" | sed -n "${i}p")
      # Add image after section
      NEW_MD="$NEW_MD\n\n$IMG\n\n"
      
      START=$((END + 1))
    done
    
    # Add the remaining content
    local REMAINING=$(echo "$MD_CONTENT" | sed -n "${START},${MD_LINES}p")
    NEW_MD="$NEW_MD$REMAINING"
    
    # Write the new markdown with images distributed
    echo -e "$NEW_MD" > "$OUTPUT_MD"
  else
    # Just use the original converted file
    cp "$TEMP_OUTPUT" "$OUTPUT_MD"
  fi
  
  echo "Cleaning up..."
  rm -rf "$TEMP_DIR"
  
  echo "Conversion complete! Output saved to $OUTPUT_MD"
  if [ "$HAS_IMAGES" = true ]; then
    echo "Images have been uploaded to Imgur and references added."
  else
    echo "No images were processed."
  fi
  
  return 0
}

# Function to convert a folder of PDF files
convert_folder() {
  local SOURCE_DIR="$1"
  local OUTPUT_DIR="$2"

  # Check if source directory exists
  if [ ! -d "$SOURCE_DIR" ]; then
    echo "Error: Source directory '$SOURCE_DIR' not found."
    return 1
  fi

  # Create output directory if it doesn't exist
  mkdir -p "$OUTPUT_DIR"

  # Find all PDF files in the source directory
  echo "Finding PDF files in $SOURCE_DIR..."
  local PDF_FILES=$(find "$SOURCE_DIR" -name "*.pdf" -type f)

  # Count files for progress tracking
  local TOTAL_FILES=$(echo "$PDF_FILES" | wc -l)
  local CURRENT=0

  echo "Found $TOTAL_FILES PDF files to convert."

  # Process each PDF file
  echo "$PDF_FILES" | while read -r PDF_FILE; do
    if [ -z "$PDF_FILE" ]; then
      continue
    fi
    
    CURRENT=$((CURRENT + 1))
    local FILENAME=$(basename "$PDF_FILE")
    local OUTPUT_FILENAME="${FILENAME%.pdf}.md"
    local OUTPUT_PATH="$OUTPUT_DIR/$OUTPUT_FILENAME"
    
    echo "[$CURRENT/$TOTAL_FILES] Converting $FILENAME to Markdown..."
    
    # Call the conversion function
    convert_single_pdf "$PDF_FILE" "$OUTPUT_PATH"
  done

  echo "Batch conversion complete! All files have been converted and saved to $OUTPUT_DIR"
  
  return 0
}

# Main execution logic
if [ "$1" = "--folder" ]; then
  # Check if source directory and output directory were provided
  if [ -z "$2" ] || [ -z "$3" ]; then
    echo "Usage for folder conversion: $0 --folder path/to/pdfs output/dir"
    exit 1
  fi
  
  # Convert folder
  convert_folder "$2" "$3"
else
  # Check if a PDF file was provided
  if [ -z "$1" ]; then
    echo "Usage: $0 input.pdf [output.md]"
    echo "       $0 --folder path/to/pdfs output/dir"
    exit 1
  fi
  
  # Set output filename
  if [ -z "$2" ]; then
    OUTPUT_MD="${1%.pdf}.md"
  else
    OUTPUT_MD="$2"
  fi
  
  # Convert single file
  convert_single_pdf "$1" "$OUTPUT_MD"
fi